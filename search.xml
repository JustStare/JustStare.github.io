<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用python和C混合编程实现远程控制(*****)</title>
      <link href="/posts/asdj92sd.html"/>
      <url>/posts/asdj92sd.html</url>
      
        <content type="html"><![CDATA[<p><img src="..\images\202302262120.gif" alt="202302262120"></p><h2 id="关于图像编码问题"><a href="#关于图像编码问题" class="headerlink" title="\关于图像编码问题**"></a><strong><em>\</em>关于图像编码问题**</strong></h2><h2 id="1"><a href="#1" class="headerlink" title="\1**"></a><strong><em>\</em>1**</strong></h2><p>我屏幕分辨率是 1920 <em> 1080 </em> 3 = 6220800，所每帧是 6220800/1024/1024 = 5.9M</p><p>如果 要60fps的话 则需要每秒传输 5.9M*60 = 360M/s 太大了 明显不可能</p><p>所以需要个图片压缩传输</p><h2 id="2"><a href="#2" class="headerlink" title="\2**"></a><strong><em>\</em>2**</strong></h2><p>如果用png压缩的话 是102K 如果60fps的话 则6m/S</p><p>也有点大</p><h2 id="3"><a href="#3" class="headerlink" title="\3**"></a><strong><em>\</em>3**</strong></h2><p>我们其实不行呀传送整张图片 </p><p>我们只需要传送 这帧和上帧的差异部分就可以，这样就可以让传输变得更加快捷</p><p>png (im2 - im1)</p><p>所以我们选择 numpy 实现两张图片之间做一个减法</p><p>而opencv-python可以把两张图片的差 变成图片进行传输</p><p><img src="..\images\wps1.jpg" alt="img"><img src="..\images\wps2.jpg" alt="img"> </p><p>Server:</p><h2 id="实现桌面的传输"><a href="#实现桌面的传输" class="headerlink" title="\实现桌面的传输**"></a><strong><em>\</em>实现桌面的传输**</strong></h2><h3 id="1、对于被控端（server）"><a href="#1、对于被控端（server）" class="headerlink" title="\1、对于被控端（server）:**"></a><strong><em>\</em>1、对于被控端（server）:**</strong></h3><p>具体步骤:</p><p>1、先建立一个套接字</p><p>2、实现桌面的截图</p><p>3、传输,接受控制端发的信息</p><p>4、实现 键盘和鼠标的操作</p><h3 id="、对于-控制端（client）："><a href="#、对于-控制端（client）：" class="headerlink" title="\、对于 控制端（client）：**"></a><strong><em>\</em>、对于 控制端（client）：**</strong></h3><p>具体步骤：</p><p>1、建立对应的套接字</p><p>2、收到数据流</p><p>3、根据套接字编码 而解码，并且监听自己cavas 鼠标 键盘 数据流 且发送给 server</p><p>4、通过从cv2.imshow() 进行show</p><p>具体的编码：</p><p><img src="..\images\wps3.jpg" alt="img"> </p><p><img src="..\images\wps4.jpg" alt="img"> </p><p>这里使用了 tkinter 模块 设置了IP地址 port 和大小等参数 实现了鼠标键盘的交互</p><p><img src="..\images\wps5.jpg" alt="img"> </p><p>并且</p><p>Client和server 通过并发编程来实现 图形的帧传输</p><p>也就是传输视频</p><p>以下是代码：</p><p><img src="..\images\wps6.jpg" alt="img"> </p><p><img src="..\images\wps7.jpg" alt="img"><img src="..\images\wps8.jpg" alt="img"> </p><p>注意 这里我使用了 struct模块封装 图片 让其成为bytes流</p><p><img src="..\images\wps9.jpg" alt="img"> </p><p>再使用了canvas来show 图片</p><p>并且在 while ture:</p><p>下     ims = cv2.imdecode(data, cv2.IMREAD_COLOR)</p><p>​    img = img + ims</p><p>​    imt = cv2.resize(img, (w, h))</p><p>​    imsh = cv2.cvtColor(imt, cv2.COLOR_RGB2RGBA)</p><p>​    imi = Image.fromarray(imsh)</p><p>​    imgTK.paste(imi)</p><p>来实现了 一直 img.tk.paste </p><p>说白了就是只要有新图片传输了 解包了 就在canvas上面展示 这个图片</p><p>于是 实现了 图片的快速替换</p><p>也就是实现了视频的传输</p><p>这是在本机的效果：</p><p><img src="..\images\wps10.jpg" alt="img"> </p><p>明显 成功了</p><p>C语言编程：</p><p>Server.C ：<img src="..\images\wps11.jpg" alt="img"></p><p>Client.C：<img src="..\images\wps12.jpg" alt="img"></p><p>使用了传统的套接字，重点就是 我们使用python中的ctypes库 实现了C和python传输</p><p>这里我们在linux用 GCC -FPIC -shared server.c -o server.so</p><p>把server和client都变成.so文件 也就是linux中的动态链接库</p><p>然后我们用server_C.py,client_C.py调用 其中的server.c和client.c</p><p>其中 server_C.py和client_C.py的函数体是一样的</p><p><img src="..\images\wps13.jpg" alt="img"> </p><p><img src="..\images\wps14.jpg" alt="img">都是对其中的调用</p><p>而 cdll.loadlibrary 函数 则指定了这两个函数库</p><p><img src="..\images\wps15.png" alt="img"></p><p>其中 listenfd server_listenfd 等都是 c_int类型 与C语言模块中socket 中类型一样</p><p><img src="..\images\wps16.jpg" alt="img">这两个 则是 c_char_p 类型 在C语言对应了 改变的bufsize</p><p>以下转换就不一一概述了</p><p>这是server_c .py 实现了talk</p><p>我使用了python中threading模块 start它 实现了传输和接送的并发</p><p><img src="..\images\wps17.jpg" alt="img"> </p><p>Client 同理 </p><p>代码类似</p><p>接下来我们把目光 放到主要的远程控制文件中 在</p><p>上面的论述中我们实现了 图形界面的传输</p><p>接下来我们要实现 键盘和鼠标 传输和操作</p><p>首先是控制端：</p><p>我们把tinker模块的canvas 中bind (sequence =”?”,func = ?)这个模块 来 封装</p><p>其中sequence 代表的是 键盘事件 </p><p>其中int参数e代表着 e在canvas中的像素位置</p><p>1 是左键 2是右键 如此类推</p><p>Func 则对应了此事件发生时引发的函数 </p><p>这里 我们先封装了 conn 也就是套接字 </p><p>Eventdo 则是用conn链接的套接字发送其中的信息</p><p>其他函数 则是直接发送 e.x/scale 也就是放缩比</p><p>得到的值就是 在控制端 鼠标应该出现的位置</p><p>左键 右键 滚轮 同理</p><p><img src="..\images\wps18.jpg" alt="img"> </p><p><img src="..\images\wps19.jpg" alt="img"> </p><p>然后我们在被控端</p><p>接受这些鼠标和键盘的数据流</p><p>Socket 套接字部分就不说了和 上述图形传输一样</p><p>这里我使用了python中<img src="..\images\wps20.jpg" alt="img"></p><p>来实现鼠标和键盘 的操作</p><p>（然后我就发现了一个问题）</p><p>在linux 和 windows中 中 python的keyboard对应的值是不同的</p><p>于是我在github中</p><p>找到了 所有平台对用的keyboard值 并且把他 独立出来 成为一个模块</p><p>Github 链接：<a href="https://github.com/boppreh/keyboard/tree/master/keyboard">https://github.com/boppreh/keyboard/tree/master/keyboard</a></p><p>也就是keyboard.py ：</p><p><img src="..\images\wps21.jpg" alt="img"> </p><p>就这样我知道了 linux 平台是 X11</p><p><img src="..\images\wps22.jpg" alt="img"> </p><p>这些就是所有平台的 keycode</p><p>于是我又回头在 控制端 设置了平台函数</p><p>为了就是 实现 平台中key不错误</p><p>解决了keycode问题</p><p>我就实现了 <img src="..\images\wps23.jpg" alt="img"></p><p>鼠标和键盘 的按下和弹起操作</p><p>到目前为止 </p><p>我的代码已经完成</p><p>当我到虚拟机实验时不出意外的报错了</p><p>错误信息是：</p><p><img src="..\images\wps24.jpg" alt="img"> </p><p>和 <img src="..\images\wps25.jpg" alt="img"></p><p>之后我在github上面找到了解决方案：</p><p>解决方案链接： <a href="https://github.com/python-pillow/Pillow/issues/5130">https://github.com/python-pillow/Pillow/issues/5130</a></p><p><img src=".\图片\wps26.jpg" alt="img"> </p><p>下面的解决方案则是 python中 xdisplay要和linux中的echo $display 参数一样</p><p>我估计 ：0在Ubuntu中是wayland :1才是 X</p><p><img src="..\images\wps27.jpg" alt="img"><img src=".\图片\wps28.jpg" alt="img"> </p><p><img src=".\图片\wps29.jpg" alt="img"> </p><p>其中我才发现了 unbuntu 居然没用X 而是使用了 wayland</p><p>还好找到了这个解决问题的方案 不然就寄了</p><p>发现我可以在linux 127.0.0.1 传输视频了</p><p><img src="..\images\wps30.jpg" alt="img"> </p><p>当我在两个虚拟机中传输时 又出现了问题：</p><p>X connection failed: error 1</p><p>后来我通过谷歌 终于发现了解决方法</p><p>原来 X 在进行链接的时候要先host+一下 我真是醉了</p><p><img src="..\images\wps31.jpg" alt="img"> </p><p>于是在linux 中输入Xhost + 开启所有链接</p><p><img src="..\images\wps32.jpg" alt="img"> </p><p>然后再次实验</p><p>终于成功了 </p><p><img src="..\images\wps33.jpg" alt="img"> </p><p>这是 两个虚拟机 右面是被控端 找到ip地址</p><p>然后写入 点击show</p><p><img src="..\images\wps34.jpg" alt="img"> </p><p>成功控制</p><p><img src="..\images\wps35.jpg" alt="img"> </p><p>字符串传输成功</p><p><img src="..\images\wps36.jpg" alt="img"> </p><p>成功实现了 远程控制</p><p>实验总结:</p><p>这次实验我收获非常大 </p><p>C和python的混合编程 </p><p>如何图像传输 </p><p>对C和python中套接字的 理解更上一层  没想到 python的socket和C的socket完全不同 尤其是 C中居然还有个自己的类型</p><p>然后就是感谢 下github上那些解决问题的人 没有他们我估计是肯定没法发现这Ubuntu还花活 总而言之 这次收获非常之大</p><p>Ps: </p><p>我之前曾经实现过 一个反木马 可以用shell操作来实现对于肉鸡的控制 但是总归还是不如 远程链接的控制 来的易操作和获得权限</p><p>在我学习 yolo的时候 由于这个小电脑 不能进行跑cuda 于是我把自己的游戏本 放在宿舍 通过<img src="..\images\wps37.jpg" alt="img"> 向日葵这个 来实现远程控制 让自己的游戏本跑 深度学习</p><p>之后我就想 我能不能自己写一个 远程控制呢？ 还是跨平台的 （向日葵不支持 linux）。</p><p>然后感谢 bilibili上面 pysrc大佬，我是向这个大佬是学习 实现了远程链接<img src="..\images\wps38.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> PIL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PIL </tag>
            
            <tag> 远程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python和C混合编程实现远程控制(*****)</title>
      <link href="/posts/asdj92sd.html"/>
      <url>/posts/asdj92sd.html</url>
      
        <content type="html"><![CDATA[<p><img src="..\images\202302262120.gif" alt="202302262120"></p><h2 id="关于图像编码问题"><a href="#关于图像编码问题" class="headerlink" title="\关于图像编码问题**"></a><strong><em>\</em>关于图像编码问题**</strong></h2><h2 id="1"><a href="#1" class="headerlink" title="\1**"></a><strong><em>\</em>1**</strong></h2><p>我屏幕分辨率是 1920 <em> 1080 </em> 3 = 6220800，所每帧是 6220800/1024/1024 = 5.9M</p><p>如果 要60fps的话 则需要每秒传输 5.9M*60 = 360M/s 太大了 明显不可能</p><p>所以需要个图片压缩传输</p><h2 id="2"><a href="#2" class="headerlink" title="\2**"></a><strong><em>\</em>2**</strong></h2><p>如果用png压缩的话 是102K 如果60fps的话 则6m/S</p><p>也有点大</p><h2 id="3"><a href="#3" class="headerlink" title="\3**"></a><strong><em>\</em>3**</strong></h2><p>我们其实不行呀传送整张图片 </p><p>我们只需要传送 这帧和上帧的差异部分就可以，这样就可以让传输变得更加快捷</p><p>png (im2 - im1)</p><p>所以我们选择 numpy 实现两张图片之间做一个减法</p><p>而opencv-python可以把两张图片的差 变成图片进行传输</p><p><img src="..\images\wps1.jpg" alt="img"><img src="..\images\wps2.jpg" alt="img"> </p><p>Server:</p><h2 id="实现桌面的传输"><a href="#实现桌面的传输" class="headerlink" title="\实现桌面的传输**"></a><strong><em>\</em>实现桌面的传输**</strong></h2><h3 id="1、对于被控端（server）"><a href="#1、对于被控端（server）" class="headerlink" title="\1、对于被控端（server）:**"></a><strong><em>\</em>1、对于被控端（server）:**</strong></h3><p>具体步骤:</p><p>1、先建立一个套接字</p><p>2、实现桌面的截图</p><p>3、传输,接受控制端发的信息</p><p>4、实现 键盘和鼠标的操作</p><h3 id="、对于-控制端（client）："><a href="#、对于-控制端（client）：" class="headerlink" title="\、对于 控制端（client）：**"></a><strong><em>\</em>、对于 控制端（client）：**</strong></h3><p>具体步骤：</p><p>1、建立对应的套接字</p><p>2、收到数据流</p><p>3、根据套接字编码 而解码，并且监听自己cavas 鼠标 键盘 数据流 且发送给 server</p><p>4、通过从cv2.imshow() 进行show</p><p>具体的编码：</p><p><img src="..\images\wps3.jpg" alt="img"> </p><p><img src="..\images\wps4.jpg" alt="img"> </p><p>这里使用了 tkinter 模块 设置了IP地址 port 和大小等参数 实现了鼠标键盘的交互</p><p><img src="..\images\wps5.jpg" alt="img"> </p><p>并且</p><p>Client和server 通过并发编程来实现 图形的帧传输</p><p>也就是传输视频</p><p>以下是代码：</p><p><img src="..\images\wps6.jpg" alt="img"> </p><p><img src="..\images\wps7.jpg" alt="img"><img src="..\images\wps8.jpg" alt="img"> </p><p>注意 这里我使用了 struct模块封装 图片 让其成为bytes流</p><p><img src="..\images\wps9.jpg" alt="img"> </p><p>再使用了canvas来show 图片</p><p>并且在 while ture:</p><p>下     ims = cv2.imdecode(data, cv2.IMREAD_COLOR)</p><p>​    img = img + ims</p><p>​    imt = cv2.resize(img, (w, h))</p><p>​    imsh = cv2.cvtColor(imt, cv2.COLOR_RGB2RGBA)</p><p>​    imi = Image.fromarray(imsh)</p><p>​    imgTK.paste(imi)</p><p>来实现了 一直 img.tk.paste </p><p>说白了就是只要有新图片传输了 解包了 就在canvas上面展示 这个图片</p><p>于是 实现了 图片的快速替换</p><p>也就是实现了视频的传输</p><p>这是在本机的效果：</p><p><img src="..\images\wps10.jpg" alt="img"> </p><p>明显 成功了</p><p>C语言编程：</p><p>Server.C ：<img src="..\images\wps11.jpg" alt="img"></p><p>Client.C：<img src="..\images\wps12.jpg" alt="img"></p><p>使用了传统的套接字，重点就是 我们使用python中的ctypes库 实现了C和python传输</p><p>这里我们在linux用 GCC -FPIC -shared server.c -o server.so</p><p>把server和client都变成.so文件 也就是linux中的动态链接库</p><p>然后我们用server_C.py,client_C.py调用 其中的server.c和client.c</p><p>其中 server_C.py和client_C.py的函数体是一样的</p><p><img src="..\images\wps13.jpg" alt="img"> </p><p><img src="..\images\wps14.jpg" alt="img">都是对其中的调用</p><p>而 cdll.loadlibrary 函数 则指定了这两个函数库</p><p><img src="..\images\wps15.png" alt="img"></p><p>其中 listenfd server_listenfd 等都是 c_int类型 与C语言模块中socket 中类型一样</p><p><img src="..\images\wps16.jpg" alt="img">这两个 则是 c_char_p 类型 在C语言对应了 改变的bufsize</p><p>以下转换就不一一概述了</p><p>这是server_c .py 实现了talk</p><p>我使用了python中threading模块 start它 实现了传输和接送的并发</p><p><img src="..\images\wps17.jpg" alt="img"> </p><p>Client 同理 </p><p>代码类似</p><p>接下来我们把目光 放到主要的远程控制文件中 在</p><p>上面的论述中我们实现了 图形界面的传输</p><p>接下来我们要实现 键盘和鼠标 传输和操作</p><p>首先是控制端：</p><p>我们把tinker模块的canvas 中bind (sequence =”?”,func = ?)这个模块 来 封装</p><p>其中sequence 代表的是 键盘事件 </p><p>其中int参数e代表着 e在canvas中的像素位置</p><p>1 是左键 2是右键 如此类推</p><p>Func 则对应了此事件发生时引发的函数 </p><p>这里 我们先封装了 conn 也就是套接字 </p><p>Eventdo 则是用conn链接的套接字发送其中的信息</p><p>其他函数 则是直接发送 e.x/scale 也就是放缩比</p><p>得到的值就是 在控制端 鼠标应该出现的位置</p><p>左键 右键 滚轮 同理</p><p><img src="..\images\wps18.jpg" alt="img"> </p><p><img src="..\images\wps19.jpg" alt="img"> </p><p>然后我们在被控端</p><p>接受这些鼠标和键盘的数据流</p><p>Socket 套接字部分就不说了和 上述图形传输一样</p><p>这里我使用了python中<img src="..\images\wps20.jpg" alt="img"></p><p>来实现鼠标和键盘 的操作</p><p>（然后我就发现了一个问题）</p><p>在linux 和 windows中 中 python的keyboard对应的值是不同的</p><p>于是我在github中</p><p>找到了 所有平台对用的keyboard值 并且把他 独立出来 成为一个模块</p><p>Github 链接：<a href="https://github.com/boppreh/keyboard/tree/master/keyboard">https://github.com/boppreh/keyboard/tree/master/keyboard</a></p><p>也就是keyboard.py ：</p><p><img src="..\images\wps21.jpg" alt="img"> </p><p>就这样我知道了 linux 平台是 X11</p><p><img src="..\images\wps22.jpg" alt="img"> </p><p>这些就是所有平台的 keycode</p><p>于是我又回头在 控制端 设置了平台函数</p><p>为了就是 实现 平台中key不错误</p><p>解决了keycode问题</p><p>我就实现了 <img src="..\images\wps23.jpg" alt="img"></p><p>鼠标和键盘 的按下和弹起操作</p><p>到目前为止 </p><p>我的代码已经完成</p><p>当我到虚拟机实验时不出意外的报错了</p><p>错误信息是：</p><p><img src="..\images\wps24.jpg" alt="img"> </p><p>和 <img src="..\images\wps25.jpg" alt="img"></p><p>之后我在github上面找到了解决方案：</p><p>解决方案链接： <a href="https://github.com/python-pillow/Pillow/issues/5130">https://github.com/python-pillow/Pillow/issues/5130</a></p><p><img src=".\图片\wps26.jpg" alt="img"> </p><p>下面的解决方案则是 python中 xdisplay要和linux中的echo $display 参数一样</p><p>我估计 ：0在Ubuntu中是wayland :1才是 X</p><p><img src="..\images\wps27.jpg" alt="img"><img src=".\图片\wps28.jpg" alt="img"> </p><p><img src=".\图片\wps29.jpg" alt="img"> </p><p>其中我才发现了 unbuntu 居然没用X 而是使用了 wayland</p><p>还好找到了这个解决问题的方案 不然就寄了</p><p>发现我可以在linux 127.0.0.1 传输视频了</p><p><img src="..\images\wps30.jpg" alt="img"> </p><p>当我在两个虚拟机中传输时 又出现了问题：</p><p>X connection failed: error 1</p><p>后来我通过谷歌 终于发现了解决方法</p><p>原来 X 在进行链接的时候要先host+一下 我真是醉了</p><p><img src="..\images\wps31.jpg" alt="img"> </p><p>于是在linux 中输入Xhost + 开启所有链接</p><p><img src="..\images\wps32.jpg" alt="img"> </p><p>然后再次实验</p><p>终于成功了 </p><p><img src="..\images\wps33.jpg" alt="img"> </p><p>这是 两个虚拟机 右面是被控端 找到ip地址</p><p>然后写入 点击show</p><p><img src="..\images\wps34.jpg" alt="img"> </p><p>成功控制</p><p><img src="..\images\wps35.jpg" alt="img"> </p><p>字符串传输成功</p><p><img src="..\images\wps36.jpg" alt="img"> </p><p>成功实现了 远程控制</p><p>实验总结:</p><p>这次实验我收获非常大 </p><p>C和python的混合编程 </p><p>如何图像传输 </p><p>对C和python中套接字的 理解更上一层  没想到 python的socket和C的socket完全不同 尤其是 C中居然还有个自己的类型</p><p>然后就是感谢 下github上那些解决问题的人 没有他们我估计是肯定没法发现这Ubuntu还花活 总而言之 这次收获非常之大</p><p>Ps: </p><p>我之前曾经实现过 一个反木马 可以用shell操作来实现对于肉鸡的控制 但是总归还是不如 远程链接的控制 来的易操作和获得权限</p><p>在我学习 yolo的时候 由于这个小电脑 不能进行跑cuda 于是我把自己的游戏本 放在宿舍 通过<img src="..\images\wps37.jpg" alt="img"> 向日葵这个 来实现远程控制 让自己的游戏本跑 深度学习</p><p>之后我就想 我能不能自己写一个 远程控制呢？ 还是跨平台的 （向日葵不支持 linux）。</p><p>然后感谢 bilibili上面 pysrc大佬，我是向这个大佬是学习 实现了远程链接<img src="..\images\wps38.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> PIL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PIL </tag>
            
            <tag> 远程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>默克尔树</title>
      <link href="/posts/vash9123.html"/>
      <url>/posts/vash9123.html</url>
      
        <content type="html"><![CDATA[<h1 id="默克尔树（Merkle-tree）是一种哈希树的结构"><a href="#默克尔树（Merkle-tree）是一种哈希树的结构" class="headerlink" title="默克尔树（Merkle tree）是一种哈希树的结构"></a>默克尔树（Merkle tree）是一种哈希树的结构</h1><p>常用于数据完整性验证和快速数据检索。在比特币中，每个区块的交易记录就是通过默克尔树组织起来的。在本文中，我们将使用Go语言实现一个简单的默克尔树。</p><p>首先，我们需要定义一个数据结构来表示默克尔树节点：</p><pre class="line-numbers language-none"><code class="language-none">type MerkleNode struct &#123;    Left  *MerkleNode    Right *MerkleNode    Data  []byte&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MerkleNode包含三个字段：Left和Right表示左右子节点，Data表示节点的数据。对于叶子节点，Data为交易记录的哈希值；对于非叶子节点，Data为左右子节点的哈希值的拼接。</p><p>接下来，我们实现一个函数来创建默克尔树节点：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewMerkleNode</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">*</span>MerkleNode<span class="token punctuation">,</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token operator">*</span>MerkleNode <span class="token punctuation">&#123;</span>    node <span class="token operator">:=</span> MerkleNode<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>Data <span class="token operator">=</span> data    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        prevHashes <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> right<span class="token punctuation">.</span>Data<span class="token operator">...</span><span class="token punctuation">)</span>        hash <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>prevHashes<span class="token punctuation">)</span>        node<span class="token punctuation">.</span>Data <span class="token operator">=</span> hash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    node<span class="token punctuation">.</span>Left <span class="token operator">=</span> left    node<span class="token punctuation">.</span>Right <span class="token operator">=</span> right    <span class="token keyword">return</span> <span class="token operator">&amp;</span>node<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NewMerkleNode函数接受左右子节点和数据作为参数，返回一个新的默克尔树节点。如果左右子节点都为空，则该节点为叶子节点，Data为数据的哈希值；否则，该节点为非叶子节点，Data为左右子节点的哈希值的拼接。左右子节点和Data字段将分别设置为函数参数的值。</p><p>最后，我们可以编写一个函数来生成默克尔树：</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">func NewMerkleTree(data [][]byte) *MerkleNode &#123;    var nodes []*MerkleNode    for _, d :&#x3D; range data &#123;        node :&#x3D; NewMerkleNode(nil, nil, d)        nodes &#x3D; append(nodes, node)    &#125;    for len(nodes) &gt; 1 &#123;        var level []*MerkleNode        for len(nodes) &gt; 0 &#123;            left :&#x3D; nodes[0]            nodes &#x3D; nodes[1:]            var right *MerkleNode            if len(nodes) &gt; 0 &#123;                right &#x3D; nodes[0]                nodes &#x3D; nodes[1:]            &#125;            node :&#x3D; NewMerkleNode(left, right, nil)            level &#x3D; append(level, node)        &#125;        nodes &#x3D; level    &#125;    return nodes[0]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NewMerkleTree函数接受一个二维字节数组作为参数，其中每个字节数组表示一个交易记录的哈希值。该函数首先将每个哈希值转换为一个默克尔树节点，并将这些节点添加到一个节点列表中。然后，函数使用节点列表生成默克尔树，直到树的根节点生成为止。最后，函数返回树的根节点</p><h2 id="下面我写完整代码："><a href="#下面我写完整代码：" class="headerlink" title="下面我写完整代码："></a>下面我写完整代码：</h2><p>在MerkleTree结构体中，我们定义了树的节点类型Node，它包含一个哈希值Hash和指向父节点和子节点的指针。另外，我们还定义了一个MerklePath结构体，它用于存储从叶子节点到根节点的路径。路径上的每个节点包含了它的兄弟节点的哈希值和它在父节点中的位置。</p><p>接下来，我们实现树的构建和哈希计算方法。在buildTree方法中，我们首先将所有数据块转换为节点，并将它们添加到叶子节点列表中。然后，我们在循环中计算每个节点的哈希值，将它们添加到父节点的子节点列表中，并将父节点添加到父节点列表中。直到只剩下根节点为止。</p><p>在calculateHash方法中，我们使用sha256哈希算法计算节点的哈希值。</p><p>最后，我们实现了generateMerklePath方法，它用于生成指定叶子节点到根节点的路径。在循环中，我们依次获取节点的兄弟节点的哈希值，并将它们添加到路径上。直到到达根节点为止。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/sha256"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">// MerkleTree 表示默克尔树结构</span><span class="token keyword">type</span> MerkleTree <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>LeafNodes <span class="token punctuation">[</span><span class="token punctuation">]</span>Node <span class="token comment">// 叶子节点列表</span>RootNode  <span class="token operator">*</span>Node  <span class="token comment">// 根节点</span><span class="token punctuation">&#125;</span><span class="token comment">// Node 表示默克尔树的一个节点</span><span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Hash       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token comment">// 节点的哈希值</span>LeftChild  <span class="token operator">*</span>Node  <span class="token comment">// 左子节点指针</span>RightChild <span class="token operator">*</span>Node  <span class="token comment">// 右子节点指针</span>Parent     <span class="token operator">*</span>Node  <span class="token comment">// 父节点指针</span><span class="token punctuation">&#125;</span><span class="token comment">// MerklePath 表示默克尔树中某个叶子节点的路径</span><span class="token keyword">type</span> MerklePath <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Hashes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token comment">// 路径中涉及到的节点的哈希值列表</span>Lefts  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span>   <span class="token comment">// 路径中每个节点是其父节点的左子节点还是右子节点的标记</span><span class="token punctuation">&#125;</span><span class="token comment">// NewMerkleTree 根据数据构建一个默克尔树</span><span class="token keyword">func</span> <span class="token function">NewMerkleTree</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token operator">*</span>MerkleTree <span class="token punctuation">&#123;</span>leafNodes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Node<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">&#123;</span>leafNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">&#123;</span>Hash<span class="token punctuation">:</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 计算数据的哈希值并赋值给叶子节点</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>MerkleTree<span class="token punctuation">&#123;</span>LeafNodes<span class="token punctuation">:</span> leafNodes<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// buildTree 构建默克尔树</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mt <span class="token operator">*</span>MerkleTree<span class="token punctuation">)</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>nodes <span class="token operator">:=</span> mt<span class="token punctuation">.</span>LeafNodes<span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> parentNodes <span class="token punctuation">[</span><span class="token punctuation">]</span>Node<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> left<span class="token punctuation">,</span> right <span class="token operator">*</span>Node<span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>left <span class="token operator">=</span> <span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>right <span class="token operator">=</span> <span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>left <span class="token operator">=</span> <span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>right <span class="token operator">=</span> left<span class="token punctuation">&#125;</span>parent <span class="token operator">:=</span> Node<span class="token punctuation">&#123;</span>LeftChild<span class="token punctuation">:</span>  left<span class="token punctuation">,</span>RightChild<span class="token punctuation">:</span> right<span class="token punctuation">,</span>Hash<span class="token punctuation">:</span>       <span class="token function">calculateHash</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> right<span class="token punctuation">.</span>Hash<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 计算左右子节点的哈希值并拼接为父节点的哈希值</span><span class="token punctuation">&#125;</span>left<span class="token punctuation">.</span>Parent <span class="token operator">=</span> <span class="token operator">&amp;</span>parentright<span class="token punctuation">.</span>Parent <span class="token operator">=</span> <span class="token operator">&amp;</span>parentparentNodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>parentNodes<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>nodes <span class="token operator">=</span> parentNodes<span class="token punctuation">&#125;</span>mt<span class="token punctuation">.</span>RootNode <span class="token operator">=</span> <span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 最后剩下的节点就是根节点</span><span class="token punctuation">&#125;</span><span class="token comment">// calculateHash 计算哈希值</span><span class="token keyword">func</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">&#123;</span>h <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mt <span class="token operator">*</span>MerkleTree<span class="token punctuation">)</span> <span class="token function">generateMerklePath</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>MerklePath <span class="token punctuation">&#123;</span>node <span class="token operator">:=</span> <span class="token operator">&amp;</span>mt<span class="token punctuation">.</span>LeafNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span>path <span class="token operator">:=</span> <span class="token operator">&amp;</span>MerklePath<span class="token punctuation">&#123;</span>Hashes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>Lefts<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> node<span class="token punctuation">.</span>Parent <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>parent <span class="token operator">:=</span> node<span class="token punctuation">.</span>ParentisLeftChild <span class="token operator">:=</span> parent<span class="token punctuation">.</span>LeftChild <span class="token operator">==</span> node<span class="token keyword">if</span> isLeftChild <span class="token punctuation">&#123;</span>path<span class="token punctuation">.</span>Lefts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>Lefts<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>path<span class="token punctuation">.</span>Hashes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>Hashes<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>RightChild<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>path<span class="token punctuation">.</span>Lefts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>Lefts<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>path<span class="token punctuation">.</span>Hashes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>Hashes<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>LeftChild<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>node <span class="token operator">=</span> parent<span class="token punctuation">&#125;</span><span class="token keyword">return</span> path<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>tree <span class="token operator">:=</span> <span class="token function">NewMerkleTree</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>tree<span class="token punctuation">.</span><span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Merkle Root Hash: %x\n"</span><span class="token punctuation">,</span> tree<span class="token punctuation">.</span>RootNode<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span>path <span class="token operator">:=</span> tree<span class="token punctuation">.</span><span class="token function">generateMerklePath</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Merkle Path for index %d:\n"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>Hashes<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hash: %x, is left child: %t\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span>Hashes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span>Lefts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BTC </tag>
            
            <tag> GO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2PSH</title>
      <link href="/posts/9wf3as.html"/>
      <url>/posts/9wf3as.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是P2PSH？"><a href="#什么是P2PSH？" class="headerlink" title="什么是P2PSH？"></a>什么是P2PSH？</h1><p>P2PSH是一种基于比特币区块链的分布式版本控制协议，类似于Git和Mercurial，但是P2PSH协议将版本控制扩展到了分布式环境中，使得多个用户能够共享和管理同一份代码。</p><p>P2PSH的设计目的是为了解决Git和Mercurial等集中式版本控制系统的一些缺点，比如单点故障和中心化控制等问题。P2PSH协议使用比特币区块链作为分布式数据库，使用比特币的密码学安全机制保证了数据的安全性和不可篡改性。</p><p>在P2PSH中，每个版本被称为“commit”，每个commit都有一个唯一的ID，称为“commit ID”。当用户提交一个commit时，需要提供commit的内容、commit的父commit ID（即前一个版本的commit ID）以及一个私钥签名，以确保该commit是由合法用户提交的。一旦commit被提交到区块链上，就不能被篡改或删除。</p><p>P2PSH协议使用Merkle树来存储文件和文件夹的内容，Merkle树是一种哈希树，它将数据分成小块并为每个块生成一个哈希值，然后将这些哈希值按照一定的规则组织成一颗树形结构。Merkle树可以高效地验证数据的完整性和一致性。</p><p>P2PSH协议使用比特币的交易机制来传输commit。每个commit都被视为比特币的一个交易，每个用户都可以通过发送比特币交易来获取和分享最新的commit。</p><p>总之，P2PSH协议是一种新型的分布式版本控制协议，它利用比特币区块链的安全性和不可篡改性来解决传统集中式版本控制系统的一些缺点。P2PSH协议具有高度的安全性和可靠性，并且能够支持多用户协同工作，未来有望成为分布式版本控制的主流协议之一。</p><h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
          <category> GOlang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> p2psh </tag>
            
            <tag> golang </tag>
            
            <tag> BTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIF (如同我这个标题图片)</title>
      <link href="/posts/aav52a2.html"/>
      <url>/posts/aav52a2.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/blog-07.gif" alt="786"></p><h1 id="使用-Python-中的-moviepy-和-PIL-库实现视频截取成为-GIF"><a href="#使用-Python-中的-moviepy-和-PIL-库实现视频截取成为-GIF" class="headerlink" title="使用 Python 中的 moviepy 和 PIL 库实现视频截取成为 GIF"></a>使用 Python 中的 moviepy 和 PIL 库实现视频截取成为 GIF</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在日常生活中，我们可能会需要把一个视频中的某个部分转换成为 GIF 图片，用于发送到社交媒体、聊天软件等应用场景。在 Python 中，我们可以使用 moviepy 和 PIL 两个库来实现视频截取成为 GIF 的功能。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在运行上述代码前，我们需要先安装 moviepy 和 PIL 库。可以使用 pip 来进行安装：</p><pre class="line-numbers language-none"><code class="language-none">pip install moviepypip install Pillow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> moviepy<span class="token punctuation">.</span>editor <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment"># 定义截取视频的函数</span><span class="token keyword">def</span> <span class="token function">video_to_gif</span><span class="token punctuation">(</span>video_path<span class="token punctuation">,</span> gif_path<span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">,</span> fps<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读取视频</span>    video <span class="token operator">=</span> VideoFileClip<span class="token punctuation">(</span>video_path<span class="token punctuation">)</span>    <span class="token comment"># 截取指定时间段的视频</span>    video <span class="token operator">=</span> video<span class="token punctuation">.</span>subclip<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">)</span>    <span class="token comment"># 指定帧率</span>    video <span class="token operator">=</span> video<span class="token punctuation">.</span>set_fps<span class="token punctuation">(</span>fps<span class="token punctuation">)</span>    <span class="token comment"># 转换成GIF</span>    video<span class="token punctuation">.</span>write_gif<span class="token punctuation">(</span>gif_path<span class="token punctuation">)</span><span class="token comment"># 调用截取视频的函数</span>video_to_gif<span class="token punctuation">(</span><span class="token string">"test.mp4"</span><span class="token punctuation">,</span> <span class="token string">"test.gif"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码定义了一个 <code>video_to_gif</code> 函数，用于截取指定时间段的视频，并将其转换为 GIF 格式。函数接收以下参数：</p><ul><li><code>video_path</code>：视频文件路径</li><li><code>gif_path</code>：生成的 GIF 文件路径</li><li><code>start_time</code>：截取视频的起始时间</li><li><code>end_time</code>：截取视频的结束时间</li><li><code>fps</code>：生成的 GIF 的帧率</li></ul><p>函数中使用了 moviepy 库中的 <code>VideoFileClip</code> 类来读取视频文件，并使用 <code>subclip</code> 方法来截取指定时间段的视频。接着，使用 <code>set_fps</code> 方法指定生成的 GIF 的帧率，并最终使用 <code>write_gif</code> 方法将视频转换为 GIF 并保存到指定路径。</p><p>最后，我们调用 <code>video_to_gif</code> 函数，传入参数即可生成指定时间段的 GIF 图片。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PIL </tag>
            
            <tag> moviepy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>录音</title>
      <link href="/posts/ad12418ca.html"/>
      <url>/posts/ad12418ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python-实现录音功能"><a href="#Python-实现录音功能" class="headerlink" title="Python 实现录音功能"></a>Python 实现录音功能</h1><p>本文将介绍如何使用 Python 实现录音功能。我们将使用 PyAudio 库来捕获和保存音频数据。</p><h2 id="1-安装-PyAudio-库"><a href="#1-安装-PyAudio-库" class="headerlink" title="1. 安装 PyAudio 库"></a>1. 安装 PyAudio 库</h2><p>首先需要安装 PyAudio 库。可以通过 pip 命令来安装：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install pyaudio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-录音"><a href="#2-录音" class="headerlink" title="2. 录音"></a>2. 录音</h2><p>下面的代码实现了录音功能。它使用 PyAudio 库来捕获音频数据，并将其保存为 WAV 文件。录音时长由 <code>RECORD_SECONDS</code> 变量控制。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pyaudio<span class="token keyword">import</span> wave<span class="token comment"># 录音时长</span>RECORD_SECONDS <span class="token operator">=</span> <span class="token number">5</span><span class="token comment"># 音频数据的采样率</span>RATE <span class="token operator">=</span> <span class="token number">16000</span><span class="token comment"># 采样大小（每次读取的音频数据块大小）</span>CHUNK <span class="token operator">=</span> <span class="token number">1024</span><span class="token comment"># 录音文件名</span>WAVE_OUTPUT_FILENAME <span class="token operator">=</span> <span class="token string">"output.wav"</span><span class="token comment"># 创建 PyAudio 对象</span>audio <span class="token operator">=</span> pyaudio<span class="token punctuation">.</span>PyAudio<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开音频流</span>stream <span class="token operator">=</span> audio<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">format</span><span class="token operator">=</span>pyaudio<span class="token punctuation">.</span>paInt16<span class="token punctuation">,</span>                    channels<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                    rate<span class="token operator">=</span>RATE<span class="token punctuation">,</span>                    <span class="token builtin">input</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                    frames_per_buffer<span class="token operator">=</span>CHUNK<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"* 开始录音..."</span><span class="token punctuation">)</span><span class="token comment"># 读取音频数据</span>frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>RATE <span class="token operator">/</span> CHUNK <span class="token operator">*</span> RECORD_SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>CHUNK<span class="token punctuation">)</span>    frames<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"* 录音结束"</span><span class="token punctuation">)</span><span class="token comment"># 关闭音频流</span>stream<span class="token punctuation">.</span>stop_stream<span class="token punctuation">(</span><span class="token punctuation">)</span>stream<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>audio<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 保存录音数据到 WAV 文件</span>wf <span class="token operator">=</span> wave<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>WAVE_OUTPUT_FILENAME<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>wf<span class="token punctuation">.</span>setnchannels<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>wf<span class="token punctuation">.</span>setsampwidth<span class="token punctuation">(</span>audio<span class="token punctuation">.</span>get_sample_size<span class="token punctuation">(</span>pyaudio<span class="token punctuation">.</span>paInt16<span class="token punctuation">)</span><span class="token punctuation">)</span>wf<span class="token punctuation">.</span>setframerate<span class="token punctuation">(</span>RATE<span class="token punctuation">)</span>wf<span class="token punctuation">.</span>writeframes<span class="token punctuation">(</span><span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>frames<span class="token punctuation">)</span><span class="token punctuation">)</span>wf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，首先创建了一个 <code>PyAudio</code> 对象，并通过它打开了一个音频流。在循环中，我们读取了音频数据，并将其添加到 <code>frames</code> 列表中。循环结束后，我们将音频流关闭，并使用 <code>wave</code> 模块将 <code>frames</code> 列表中的数据保存为 WAV 文件。</p><h2 id="3-播放录音"><a href="#3-播放录音" class="headerlink" title="3. 播放录音"></a>3. 播放录音</h2><p>下面的代码实现了播放录音功能。它使用 <code>wave</code> 模块打开录音文件，并使用 PyAudio 库播放音频数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pyaudio<span class="token keyword">import</span> wave<span class="token comment"># 录音文件名</span>WAVE_FILENAME <span class="token operator">=</span> <span class="token string">"output.wav"</span><span class="token comment"># 创建 PyAudio 对象</span>audio <span class="token operator">=</span> pyaudio<span class="token punctuation">.</span>PyAudio<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开 WAV 文件</span>wf <span class="token operator">=</span> wave<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>WAVE_FILENAME<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token comment"># 打开音频流</span>stream <span class="token operator">=</span> audio<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">format</span><span class="token operator">=</span>audio<span class="token punctuation">.</span>get_format_from_width<span class="token punctuation">(</span>wf<span class="token punctuation">.</span>getsampwidth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    channels<span class="token operator">=</span>wf<span class="token punctuation">.</span>getnchannels<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    rate<span class="token operator">=</span>wf<span class="token punctuation">.</span>getframerate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    output<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 播放音频数据</span>data <span class="token operator">=</span> wf<span class="token punctuation">.</span>readframes<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">while</span> data<span class="token punctuation">:</span>    stream<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    data <span class="token operator">=</span> wf<span class="token punctuation">.</span>readframes<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token comment"># 关闭音频流</span>stream<span class="token punctuation">.</span>stop_stream<span class="token punctuation">(</span><span class="token punctuation">)</span>stream<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>audio<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyaudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频分解</title>
      <link href="/posts/ad7798ca.html"/>
      <url>/posts/ad7798ca.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用Python-tkinter提取视频文件中的音频"><a href="#使用Python-tkinter提取视频文件中的音频" class="headerlink" title="使用Python tkinter提取视频文件中的音频"></a>使用Python tkinter提取视频文件中的音频</h2><p>​                本篇博客介绍如何使用Python tkinter库实现一个图形界面，通过选择视频文件，将视频中的音频分离出来，保存为AAC格式文件。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="1-导入所需库"><a href="#1-导入所需库" class="headerlink" title="1. 导入所需库"></a>1. 导入所需库</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">from</span> tkinter <span class="token keyword">import</span> filedialog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-创建应用类"><a href="#2-创建应用类" class="headerlink" title="2. 创建应用类"></a>2. 创建应用类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> master<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>master<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>master <span class="token operator">=</span> master        self<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_widgets<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create_widgets</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 添加选择视频文件按钮</span>        self<span class="token punctuation">.</span>select_video_button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>select_video_button<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"选择视频文件"</span>        self<span class="token punctuation">.</span>select_video_button<span class="token punctuation">[</span><span class="token string">"command"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>select_video_file        self<span class="token punctuation">.</span>select_video_button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"top"</span><span class="token punctuation">)</span>        <span class="token comment"># 添加音频提取按钮</span>        self<span class="token punctuation">.</span>extract_audio_button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>extract_audio_button<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"提取音频"</span>        self<span class="token punctuation">.</span>extract_audio_button<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"disabled"</span>        self<span class="token punctuation">.</span>extract_audio_button<span class="token punctuation">[</span><span class="token string">"command"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>extract_audio        self<span class="token punctuation">.</span>extract_audio_button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"top"</span><span class="token punctuation">)</span>        <span class="token comment"># 添加退出按钮</span>        self<span class="token punctuation">.</span>quit <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"退出"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span>                              command<span class="token operator">=</span>self<span class="token punctuation">.</span>master<span class="token punctuation">.</span>destroy<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>quit<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"bottom"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个类中，我们创建了一个图形界面应用程序，包含了选择视频文件、提取音频、退出三个按钮。</p><h4 id="3-实现选择视频文件功能"><a href="#3-实现选择视频文件功能" class="headerlink" title="3. 实现选择视频文件功能"></a>3. 实现选择视频文件功能</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_video_file</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 弹出文件选择对话框，获取用户选择的视频文件路径</span>      self<span class="token punctuation">.</span>video_path <span class="token operator">=</span> filedialog<span class="token punctuation">.</span>askopenfilename<span class="token punctuation">(</span>initialdir<span class="token operator">=</span><span class="token string">"./"</span><span class="token punctuation">,</span>                                                   title<span class="token operator">=</span><span class="token string">"选择视频文件"</span><span class="token punctuation">,</span>                                                   filetypes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"视频文件"</span><span class="token punctuation">,</span> <span class="token string">"*.mp4;*.avi;*.mov"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"所有文件"</span><span class="token punctuation">,</span> <span class="token string">"*.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>video_path<span class="token punctuation">:</span>          <span class="token comment"># 激活音频提取按钮</span>          self<span class="token punctuation">.</span>extract_audio_button<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"normal"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过调用filedialog.askopenfilename()方法，弹出文件选择对话框，获取用户选择的视频文件路径，并保存在实例变量self.video_path中。如果选择了文件，就激活音频提取按钮。</p><h4 id="4-实现音频提取功能"><a href="#4-实现音频提取功能" class="headerlink" title="4. 实现音频提取功能"></a>4. 实现音频提取功能</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_audio</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 使用FFmpeg将视频中的音频分离出来</span>      output_path <span class="token operator">=</span> <span class="token string">"output.aac"</span>      os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"ffmpeg -i </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>video_path<span class="token punctuation">&#125;</span></span><span class="token string"> -vn -acodec copy </span><span class="token interpolation"><span class="token punctuation">&#123;</span>output_path<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"音频已经被提取到 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>output_path<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>      self<span class="token punctuation">.</span>extract_audio_button<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"disabled"</span>      tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"音频已提取完成！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​          通过调用os.system()方法，使用FFmpeg将视频中的音频分离出来，并保存为AAC格式文件。最后，将音频提取按钮禁用，并使用tkinter库的messagebox.showinfo()方法弹出提示对话</p>]]></content>
      
      
      <categories>
          
          <category> ffm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tk </tag>
            
            <tag> ffm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单神经网络 - 利用鸢尾花数据集，实现前向传播、反向传播，可视化loss曲线</title>
      <link href="/posts/2b018d11.html"/>
      <url>/posts/2b018d11.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>导入数据，分别为输入特征和标签</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x_data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>datay_data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><em>随机打乱数据（因为原始数据是顺序的，顺序不打乱会影响准确率）</em></strong></p><p><strong><em>seed: 随机数种子，是一个整数，当设置之后，每次生成的随机数都一样</em></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span>  <span class="token comment"># 使用相同的seed，保证输入特征和标签一一对应</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>y_data<span class="token punctuation">)</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>set_seed<span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>将打乱后的数据集分割为训练集和测试集，训练集为前120行，测试集为后30行</em></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x_train <span class="token operator">=</span> x_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">]</span>y_train <span class="token operator">=</span> y_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">]</span>x_test <span class="token operator">=</span> x_data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token punctuation">]</span>y_test <span class="token operator">=</span> y_data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>转换x的数据类型，否则后面矩阵相乘时会因数据类型不一致报错</em></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x_train <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>x_test <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><em>from_tensor_slices函数使输入特征和标签值一一对应。（把数据集分批次，每个批次batch组数据）</em></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_db <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>from_tensor_slices<span class="token punctuation">(</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>test_db <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>from_tensor_slices<span class="token punctuation">(</span><span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><em>生成神经网络的参数，4个输入特征故，输入层为4个输入节点；因为3分类，故输出层为3个神经元</em></strong></p><p><strong><em>用tf.Variable()标记参数可训练</em></strong></p><p><strong><em>使用seed使每次生成的随机数相同</em></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">w1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">lr <span class="token operator">=</span> <span class="token number">0.01</span>  <span class="token comment"># 学习率为0.01  </span>train_loss_results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 将每轮的loss记录在此列表中，为后续画loss曲线提供数据</span>test_acc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 将每轮的acc记录在此列表中，为后续画acc曲线提供数据</span>epoch <span class="token operator">=</span> <span class="token number">5000</span>  <span class="token comment"># 循环5000轮 </span>loss_all <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 每轮分4个step，loss_all记录四个step生成的4个loss的和</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>注意： 我这里面lr(学习率)设置的有点小 根据梯度下降法来说这个模型不需要设置这么小，同样 epoch循环论次 我也设置较大 这两个参数根据实际情况设置</em></strong></p><hr><h2 id="训练部分"><a href="#训练部分" class="headerlink" title="训练部分"></a>训练部分</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#数据集级别的循环，每个epoch循环一次数据集</span>    <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_db<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#batch级别的循环 ，每个step循环一个batch</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tape<span class="token punctuation">:</span>  <span class="token comment"># with结构记录梯度信息</span>            y <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> w1<span class="token punctuation">)</span> <span class="token operator">+</span> b1  <span class="token comment"># 神经网络乘加运算</span>            y <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment"># 使输出y符合概率分布（此操作后与独热码同量级，可相减求loss）</span>            y_ <span class="token operator">=</span> tf<span class="token punctuation">.</span>one_hot<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> depth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 将标签值转换为独热码格式，方便计算loss和accuracy</span>            loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y_ <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 采用均方误差损失函数mse = mean(sum(y-out)^2)</span>            loss_all <span class="token operator">+=</span> loss<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将每个step计算出的loss累加，为后续求loss平均值提供数据，这样计算的loss更准确</span>        <span class="token comment"># 计算loss对各个参数的梯度</span>        grads <span class="token operator">=</span> tape<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> <span class="token punctuation">[</span>w1<span class="token punctuation">,</span> b1<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 实现梯度更新 w1 = w1 - lr * w1_grad    b = b - lr * b_grad</span>        w1<span class="token punctuation">.</span>assign_sub<span class="token punctuation">(</span>lr <span class="token operator">*</span> grads<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 参数w1自更新</span>        b1<span class="token punctuation">.</span>assign_sub<span class="token punctuation">(</span>lr <span class="token operator">*</span> grads<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 参数b自更新</span>    <span class="token comment"># 每个epoch，打印loss信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Epoch &#123;&#125;, loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> loss_all<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    train_loss_results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss_all <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 将4个step的loss求平均记录在此变量中</span>    loss_all <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># loss_all归零，为记录下一个epoch的lo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试部分"><a href="#测试部分" class="headerlink" title="测试部分"></a>测试部分</h2><p><strong><em>total_correct为预测对的样本个数, total_number为测试的总样本数，将这两个变量都初始化为0</em></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">total_correct<span class="token punctuation">,</span> total_number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> x_test<span class="token punctuation">,</span> y_test <span class="token keyword">in</span> test_db<span class="token punctuation">:</span>    <span class="token comment"># 使用更新后的参数进行预测</span>    y <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> w1<span class="token punctuation">)</span> <span class="token operator">+</span> b1    y <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    pred <span class="token operator">=</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 返回y中最大值的索引，即预测的分类</span>    <span class="token comment"># 将pred转换为y_test的数据类型</span>    pred <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> dtype<span class="token operator">=</span>y_test<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>    <span class="token comment"># 若分类正确，则correct=1，否则为0，将bool型的结果转换为int型</span>    correct <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>    <span class="token comment"># 将每个batch的correct数加起来</span>    correct <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>correct<span class="token punctuation">)</span>    <span class="token comment"># 将所有batch中的correct数加起来</span>    total_correct <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>correct<span class="token punctuation">)</span>    <span class="token comment"># total_number为测试的总样本数，也就是x_test的行数，shape[0]返回变量的行数</span>    total_number <span class="token operator">+=</span> x_test<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 总的准确率等于total_correct/total_number</span>acc <span class="token operator">=</span> total_correct <span class="token operator">/</span> total_numbertest_acc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Test_acc:"</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="绘制曲线"><a href="#绘制曲线" class="headerlink" title="绘制曲线"></a>绘制曲线</h2><h4 id="绘制-loss曲线"><a href="#绘制-loss曲线" class="headerlink" title="绘制 loss曲线"></a>绘制 loss曲线</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Loss Function Curve'</span><span class="token punctuation">)</span>  <span class="token comment"># 图片标题</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Epoch'</span><span class="token punctuation">)</span>  <span class="token comment"># x轴变量名称</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Loss'</span><span class="token punctuation">)</span>  <span class="token comment"># y轴变量名称</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_loss_results<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"$Loss$"</span><span class="token punctuation">)</span>  <span class="token comment"># 逐点画出trian_loss_results值并连线，连线图标是Loss</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 画出曲线图标</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 画出图像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绘制-Accuracy-曲线"><a href="#绘制-Accuracy-曲线" class="headerlink" title="绘制 Accuracy 曲线"></a>绘制 Accuracy 曲线</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Acc Curve'</span><span class="token punctuation">)</span>  <span class="token comment"># 图片标题</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Epoch'</span><span class="token punctuation">)</span>  <span class="token comment"># x轴变量名称</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Acc'</span><span class="token punctuation">)</span>  <span class="token comment"># y轴变量名称</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_acc<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"$Accuracy$"</span><span class="token punctuation">)</span>  <span class="token comment"># 逐点画出test_acc值并连线，连线图标是Accuracy</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><h4 id="loss-Curve"><a href="#loss-Curve" class="headerlink" title="loss  Curve"></a>loss  Curve</h4><p><img src="../images/01 - loss.png" alt="01 - loss"></p><h4 id="Acc-Curve"><a href="#Acc-Curve" class="headerlink" title="Acc Curve"></a>Acc Curve</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">&#123;% asset_path 01 --acc.png %&#125;  &#123;% asset_img 01 --acc.png [title] %&#125;  &#123;% asset_link 01 --acc.png [title] %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 简单神经网络 </tag>
            
            <tag> 可视化曲线 </tag>
            
            <tag> sklearn </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络分类</title>
      <link href="/posts/3b46aa8e.html"/>
      <url>/posts/3b46aa8e.html</url>
      
        <content type="html"><![CDATA[<h3 id="Mnist分类任务："><a href="#Mnist分类任务：" class="headerlink" title="Mnist分类任务："></a>Mnist分类任务：</h3><ul><li><p>网络基本构建与训练方法，常用函数解析</p></li><li><p>torch.nn.functional模块</p></li><li><p>nn.Module模块</p></li></ul><h3 id="读取Mnist数据集"><a href="#读取Mnist数据集" class="headerlink" title="读取Mnist数据集"></a>读取Mnist数据集</h3><ul><li>会自动进行下载</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">import</span> requestsDATA_PATH <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span>PATH <span class="token operator">=</span> DATA_PATH <span class="token operator">/</span> <span class="token string">"mnist"</span>PATH<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>URL <span class="token operator">=</span> <span class="token string">"http://deeplearning.net/data/mnist/"</span>FILENAME <span class="token operator">=</span> <span class="token string">"mnist.pkl.gz"</span><span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>PATH <span class="token operator">/</span> FILENAME<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL <span class="token operator">+</span> FILENAME<span class="token punctuation">)</span><span class="token punctuation">.</span>content        <span class="token punctuation">(</span>PATH <span class="token operator">/</span> FILENAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> gzip<span class="token keyword">with</span> gzip<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PATH <span class="token operator">/</span> FILENAME<span class="token punctuation">)</span><span class="token punctuation">.</span>as_posix<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_valid<span class="token punctuation">,</span> y_valid<span class="token punctuation">)</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"latin-1"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>784是mnist数据集每个样本的像素点个数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot<span class="token keyword">import</span> numpy <span class="token keyword">as</span> nppyplot<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>x_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"gray"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(50000, 784)</code></pre><p><img src="../images/output_6_1.png" alt="784"></p><p><img src="../images/4.png" alt="1"></p><p><img src="../images/5.png" alt="网络"></p><p>注意数据需转换成tensor才能参与后续建模训练</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchx_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> x_valid<span class="token punctuation">,</span> y_valid <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>    torch<span class="token punctuation">.</span>tensor<span class="token punctuation">,</span> <span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> x_valid<span class="token punctuation">,</span> y_valid<span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token punctuation">,</span> c <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shapex_train<span class="token punctuation">,</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> y_train<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_train<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_train<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_train<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[0., 0., 0.,  ..., 0., 0., 0.],        [0., 0., 0.,  ..., 0., 0., 0.],        [0., 0., 0.,  ..., 0., 0., 0.],        ...,        [0., 0., 0.,  ..., 0., 0., 0.],        [0., 0., 0.,  ..., 0., 0., 0.],        [0., 0., 0.,  ..., 0., 0., 0.]]) tensor([5, 0, 4,  ..., 8, 4, 8])torch.Size([50000, 784])tensor(0) tensor(9)</code></pre><h3 id="torch-nn-functional-很多层和函数在这里都会见到"><a href="#torch-nn-functional-很多层和函数在这里都会见到" class="headerlink" title="torch.nn.functional 很多层和函数在这里都会见到"></a>torch.nn.functional 很多层和函数在这里都会见到</h3><p>torch.nn.functional中有很多功能，后续会常用的。那什么时候使用nn.Module，什么时候使用nn.functional呢？一般情况下，如果模型有可学习的参数，最好用nn.Module，其他情况nn.functional相对更简单一些</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> Floss_func <span class="token operator">=</span> F<span class="token punctuation">.</span>cross_entropy<span class="token keyword">def</span> <span class="token function">model</span><span class="token punctuation">(</span>xb<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> xb<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>weights<span class="token punctuation">)</span> <span class="token operator">+</span> bias<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bs <span class="token operator">=</span> <span class="token number">64</span>xb <span class="token operator">=</span> x_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>bs<span class="token punctuation">]</span>  <span class="token comment"># a mini-batch from x</span>yb <span class="token operator">=</span> y_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>bs<span class="token punctuation">]</span>weights <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">,</span>  requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> bs <span class="token operator">=</span> <span class="token number">64</span>bias <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>loss_func<span class="token punctuation">(</span>model<span class="token punctuation">(</span>xb<span class="token punctuation">)</span><span class="token punctuation">,</span> yb<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tensor(10.7988, grad_fn=&lt;NllLossBackward&gt;)</code></pre><h3 id="创建一个model来更简化代码"><a href="#创建一个model来更简化代码" class="headerlink" title="创建一个model来更简化代码"></a>创建一个model来更简化代码</h3><ul><li>必须继承nn.Module且在其构造函数中需调用nn.Module的构造函数</li><li>无需写反向传播函数，nn.Module能够利用autograd自动实现反向传播</li><li>Module中的可学习参数可以通过named_parameters()或者parameters()返回迭代器</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">class</span> <span class="token class-name">Mnist_NN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out  <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">net <span class="token operator">=</span> Mnist_NN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Mnist_NN(  (hidden1): Linear(in_features=784, out_features=128, bias=True)  (hidden2): Linear(in_features=128, out_features=256, bias=True)  (out): Linear(in_features=256, out_features=10, bias=True))</code></pre><p>可以打印我们定义好名字里的权重和偏置项</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> name<span class="token punctuation">,</span> parameter <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span>parameter<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hidden1.weight Parameter containing:tensor([[ 0.0018,  0.0218,  0.0036,  ..., -0.0286, -0.0166,  0.0089],        [-0.0349,  0.0268,  0.0328,  ...,  0.0263,  0.0200, -0.0137],        [ 0.0061,  0.0060, -0.0351,  ...,  0.0130, -0.0085,  0.0073],        ...,        [-0.0231,  0.0195, -0.0205,  ..., -0.0207, -0.0103, -0.0223],        [-0.0299,  0.0305,  0.0098,  ...,  0.0184, -0.0247, -0.0207],        [-0.0306, -0.0252, -0.0341,  ...,  0.0136, -0.0285,  0.0057]],       requires_grad=True) torch.Size([128, 784])hidden1.bias Parameter containing:tensor([ 0.0072, -0.0269, -0.0320, -0.0162,  0.0102,  0.0189, -0.0118, -0.0063,        -0.0277,  0.0349,  0.0267, -0.0035,  0.0127, -0.0152, -0.0070,  0.0228,        -0.0029,  0.0049,  0.0072,  0.0002, -0.0356,  0.0097, -0.0003, -0.0223,        -0.0028, -0.0120, -0.0060, -0.0063,  0.0237,  0.0142,  0.0044, -0.0005,         0.0349, -0.0132,  0.0138, -0.0295, -0.0299,  0.0074,  0.0231,  0.0292,        -0.0178,  0.0046,  0.0043, -0.0195,  0.0175, -0.0069,  0.0228,  0.0169,         0.0339,  0.0245, -0.0326, -0.0260, -0.0029,  0.0028,  0.0322, -0.0209,        -0.0287,  0.0195,  0.0188,  0.0261,  0.0148, -0.0195, -0.0094, -0.0294,        -0.0209, -0.0142,  0.0131,  0.0273,  0.0017,  0.0219,  0.0187,  0.0161,         0.0203,  0.0332,  0.0225,  0.0154,  0.0169, -0.0346, -0.0114,  0.0277,         0.0292, -0.0164,  0.0001, -0.0299, -0.0076, -0.0128, -0.0076, -0.0080,        -0.0209, -0.0194, -0.0143,  0.0292, -0.0316, -0.0188, -0.0052,  0.0013,        -0.0247,  0.0352, -0.0253, -0.0306,  0.0035, -0.0253,  0.0167, -0.0260,        -0.0179, -0.0342,  0.0033, -0.0287, -0.0272,  0.0238,  0.0323,  0.0108,         0.0097,  0.0219,  0.0111,  0.0208, -0.0279,  0.0324, -0.0325, -0.0166,        -0.0010, -0.0007,  0.0298,  0.0329,  0.0012, -0.0073, -0.0010,  0.0057],       requires_grad=True) torch.Size([128])hidden2.weight Parameter containing:tensor([[-0.0383, -0.0649,  0.0665,  ..., -0.0312,  0.0394, -0.0801],        [-0.0189, -0.0342,  0.0431,  ..., -0.0321,  0.0072,  0.0367],        [ 0.0289,  0.0780,  0.0496,  ...,  0.0018, -0.0604, -0.0156],        ...,        [-0.0360,  0.0394, -0.0615,  ...,  0.0233, -0.0536, -0.0266],        [ 0.0416,  0.0082, -0.0345,  ...,  0.0808, -0.0308, -0.0403],        [-0.0477,  0.0136, -0.0408,  ...,  0.0180, -0.0316, -0.0782]],       requires_grad=True) torch.Size([256, 128])hidden2.bias Parameter containing:tensor([-0.0694, -0.0363, -0.0178,  0.0206, -0.0875, -0.0876, -0.0369, -0.0386,         0.0642, -0.0738, -0.0017, -0.0243, -0.0054,  0.0757, -0.0254,  0.0050,         0.0519, -0.0695,  0.0318, -0.0042, -0.0189, -0.0263, -0.0627, -0.0691,         0.0713, -0.0696, -0.0672,  0.0297,  0.0102,  0.0040,  0.0830,  0.0214,         0.0714,  0.0327, -0.0582, -0.0354,  0.0621,  0.0475,  0.0490,  0.0331,        -0.0111, -0.0469, -0.0695, -0.0062, -0.0432, -0.0132, -0.0856, -0.0219,        -0.0185, -0.0517,  0.0017, -0.0788, -0.0403,  0.0039,  0.0544, -0.0496,         0.0588, -0.0068,  0.0496,  0.0588, -0.0100,  0.0731,  0.0071, -0.0155,        -0.0872, -0.0504,  0.0499,  0.0628, -0.0057,  0.0530, -0.0518, -0.0049,         0.0767,  0.0743,  0.0748, -0.0438,  0.0235, -0.0809,  0.0140, -0.0374,         0.0615, -0.0177,  0.0061, -0.0013, -0.0138, -0.0750, -0.0550,  0.0732,         0.0050,  0.0778,  0.0415,  0.0487,  0.0522,  0.0867, -0.0255, -0.0264,         0.0829,  0.0599,  0.0194,  0.0831, -0.0562,  0.0487, -0.0411,  0.0237,         0.0347, -0.0194, -0.0560, -0.0562, -0.0076,  0.0459, -0.0477,  0.0345,        -0.0575, -0.0005,  0.0174,  0.0855, -0.0257, -0.0279, -0.0348, -0.0114,        -0.0823, -0.0075, -0.0524,  0.0331,  0.0387, -0.0575,  0.0068, -0.0590,        -0.0101, -0.0880, -0.0375,  0.0033, -0.0172, -0.0641, -0.0797,  0.0407,         0.0741, -0.0041, -0.0608,  0.0672, -0.0464, -0.0716, -0.0191, -0.0645,         0.0397,  0.0013,  0.0063,  0.0370,  0.0475, -0.0535,  0.0721, -0.0431,         0.0053, -0.0568, -0.0228, -0.0260, -0.0784, -0.0148,  0.0229, -0.0095,        -0.0040,  0.0025,  0.0781,  0.0140, -0.0561,  0.0384, -0.0011, -0.0366,         0.0345,  0.0015,  0.0294, -0.0734, -0.0852, -0.0015, -0.0747, -0.0100,         0.0801, -0.0739,  0.0611,  0.0536,  0.0298, -0.0097,  0.0017, -0.0398,         0.0076, -0.0759, -0.0293,  0.0344, -0.0463, -0.0270,  0.0447,  0.0814,        -0.0193, -0.0559,  0.0160,  0.0216, -0.0346,  0.0316,  0.0881, -0.0652,        -0.0169,  0.0117, -0.0107, -0.0754, -0.0231, -0.0291,  0.0210,  0.0427,         0.0418,  0.0040,  0.0762,  0.0645, -0.0368, -0.0229, -0.0569, -0.0881,        -0.0660,  0.0297,  0.0433, -0.0777,  0.0212, -0.0601,  0.0795, -0.0511,        -0.0634,  0.0720,  0.0016,  0.0693, -0.0547, -0.0652, -0.0480,  0.0759,         0.0194, -0.0328, -0.0211, -0.0025, -0.0055, -0.0157,  0.0817,  0.0030,         0.0310, -0.0735,  0.0160, -0.0368,  0.0528, -0.0675, -0.0083, -0.0427,        -0.0872,  0.0699,  0.0795, -0.0738, -0.0639,  0.0350,  0.0114,  0.0303],       requires_grad=True) torch.Size([256])out.weight Parameter containing:tensor([[ 0.0232, -0.0571,  0.0439,  ..., -0.0417, -0.0237,  0.0183],        [ 0.0210,  0.0607,  0.0277,  ..., -0.0015,  0.0571,  0.0502],        [ 0.0297, -0.0393,  0.0616,  ...,  0.0131, -0.0163, -0.0239],        ...,        [ 0.0416,  0.0309, -0.0441,  ..., -0.0493,  0.0284, -0.0230],        [ 0.0404, -0.0564,  0.0442,  ..., -0.0271, -0.0526, -0.0554],        [-0.0404, -0.0049, -0.0256,  ..., -0.0262, -0.0130,  0.0057]],       requires_grad=True) torch.Size([10, 256])out.bias Parameter containing:tensor([-0.0536,  0.0007,  0.0227, -0.0072, -0.0168, -0.0125, -0.0207, -0.0558,         0.0579, -0.0439], requires_grad=True) torch.Size([10])</code></pre><h3 id="使用TensorDataset和DataLoader来简化"><a href="#使用TensorDataset和DataLoader来简化" class="headerlink" title="使用TensorDataset和DataLoader来简化"></a>使用TensorDataset和DataLoader来简化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> TensorDataset<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoadertrain_ds <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>train_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>bs<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>valid_ds <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>x_valid<span class="token punctuation">,</span> y_valid<span class="token punctuation">)</span>valid_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>valid_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>bs <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> valid_ds<span class="token punctuation">,</span> bs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        DataLoader<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>bs<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        DataLoader<span class="token punctuation">(</span>valid_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>bs <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一般在训练模型时加上model.train()，这样会正常使用Batch Normalization和 Dropout</li><li>测试的时候一般选择model.eval()，这样就不会使用Batch Normalization和 Dropout</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>steps<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> train_dl<span class="token punctuation">,</span> valid_dl<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> step <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> xb<span class="token punctuation">,</span> yb <span class="token keyword">in</span> train_dl<span class="token punctuation">:</span>            loss_batch<span class="token punctuation">(</span>model<span class="token punctuation">,</span> loss_func<span class="token punctuation">,</span> xb<span class="token punctuation">,</span> yb<span class="token punctuation">,</span> opt<span class="token punctuation">)</span>        model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            losses<span class="token punctuation">,</span> nums <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>                <span class="token operator">*</span><span class="token punctuation">[</span>loss_batch<span class="token punctuation">(</span>model<span class="token punctuation">,</span> loss_func<span class="token punctuation">,</span> xb<span class="token punctuation">,</span> yb<span class="token punctuation">)</span> <span class="token keyword">for</span> xb<span class="token punctuation">,</span> yb <span class="token keyword">in</span> valid_dl<span class="token punctuation">]</span>            <span class="token punctuation">)</span>        val_loss <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>losses<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前step:'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'验证集损失：'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>val_loss<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Mnist_NN<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token punctuation">,</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">loss_batch</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> loss_func<span class="token punctuation">,</span> xb<span class="token punctuation">,</span> yb<span class="token punctuation">,</span> opt<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>model<span class="token punctuation">(</span>xb<span class="token punctuation">)</span><span class="token punctuation">,</span> yb<span class="token punctuation">)</span>    <span class="token keyword">if</span> opt <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        opt<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        opt<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>xb<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三行搞定！"><a href="#三行搞定！" class="headerlink" title="三行搞定！"></a>三行搞定！</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_dl<span class="token punctuation">,</span> valid_dl <span class="token operator">=</span> get_data<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> valid_ds<span class="token punctuation">,</span> bs<span class="token punctuation">)</span>model<span class="token punctuation">,</span> opt <span class="token operator">=</span> get_model<span class="token punctuation">(</span><span class="token punctuation">)</span>fit<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> train_dl<span class="token punctuation">,</span> valid_dl<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>当前step:0 验证集损失：2.2796445930480957当前step:1 验证集损失：2.2440698066711424当前step:2 验证集损失：2.1889826164245605当前step:3 验证集损失：2.0985311767578123当前step:4 验证集损失：1.9517273582458496当前step:5 验证集损失：1.7341805934906005当前step:6 验证集损失：1.4719875366210937当前step:7 验证集损失：1.2273896869659424当前step:8 验证集损失：1.0362271406173706当前step:9 验证集损失：0.8963696184158325当前step:10 验证集损失：0.7927186088562012当前step:11 验证集损失：0.7141492074012756当前step:12 验证集损失：0.6529350900650024当前step:13 验证集损失：0.60417300491333当前step:14 验证集损失：0.5643046331882476当前step:15 验证集损失：0.5317994566917419当前step:16 验证集损失：0.5047958114624024当前step:17 验证集损失：0.4813900615692139当前step:18 验证集损失：0.4618900228500366当前step:19 验证集损失：0.4443243554592133当前step:20 验证集损失：0.4297310716629028当前step:21 验证集损失：0.416976597738266当前step:22 验证集损失：0.406348459148407当前step:23 验证集损失：0.3963301926612854当前step:24 验证集损失：0.38733808159828187</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mnist </tag>
            
            <tag> nn </tag>
            
            <tag> pytorch </tag>
            
            <tag> TensorDataset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单神经网络 - 搭建PyTorch神经网络进行气温预测</title>
      <link href="/posts/2022%2010%203.html"/>
      <url>/posts/2022%2010%203.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">)</span><span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">features <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'temps.csv'</span><span class="token punctuation">)</span><span class="token comment">#看看数据长什么样子</span>features<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>year</th>      <th>month</th>      <th>day</th>      <th>week</th>      <th>temp_2</th>      <th>temp_1</th>      <th>average</th>      <th>actual</th>      <th>friend</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2016</td>      <td>1</td>      <td>1</td>      <td>Fri</td>      <td>45</td>      <td>45</td>      <td>45.6</td>      <td>45</td>      <td>29</td>    </tr>    <tr>      <th>1</th>      <td>2016</td>      <td>1</td>      <td>2</td>      <td>Sat</td>      <td>44</td>      <td>45</td>      <td>45.7</td>      <td>44</td>      <td>61</td>    </tr>    <tr>      <th>2</th>      <td>2016</td>      <td>1</td>      <td>3</td>      <td>Sun</td>      <td>45</td>      <td>44</td>      <td>45.8</td>      <td>41</td>      <td>56</td>    </tr>    <tr>      <th>3</th>      <td>2016</td>      <td>1</td>      <td>4</td>      <td>Mon</td>      <td>44</td>      <td>41</td>      <td>45.9</td>      <td>40</td>      <td>53</td>    </tr>    <tr>      <th>4</th>      <td>2016</td>      <td>1</td>      <td>5</td>      <td>Tues</td>      <td>41</td>      <td>40</td>      <td>46.0</td>      <td>44</td>      <td>41</td>    </tr>  </tbody></table></div><p>数据表中</p><ul><li>year,moth,day,week分别表示的具体的时间</li><li>temp_2：前天的最高温度值</li><li>temp_1：昨天的最高温度值</li><li>average：在历史中，每年这一天的平均最高温度值</li><li>actual：这就是我们的标签值了，当天的真实最高温度</li><li>friend：这一列可能是凑热闹的，你的朋友猜测的可能值，咱们不管它就好了</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据维度:'</span><span class="token punctuation">,</span> features<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>数据维度: (348, 9)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 处理时间数据</span><span class="token keyword">import</span> datetime<span class="token comment"># 分别得到年，月，日</span>years <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span>months <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'month'</span><span class="token punctuation">]</span>days <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span><span class="token comment"># datetime格式</span>dates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>years<span class="token punctuation">,</span> months<span class="token punctuation">,</span> days<span class="token punctuation">)</span><span class="token punctuation">]</span>dates <span class="token operator">=</span> <span class="token punctuation">[</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> date <span class="token keyword">in</span> dates<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dates<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[datetime.datetime(2016, 1, 1, 0, 0), datetime.datetime(2016, 1, 2, 0, 0), datetime.datetime(2016, 1, 3, 0, 0), datetime.datetime(2016, 1, 4, 0, 0), datetime.datetime(2016, 1, 5, 0, 0)]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 准备画图</span><span class="token comment"># 指定默认风格</span>plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'fivethirtyeight'</span><span class="token punctuation">)</span><span class="token comment"># 设置布局</span>fig<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ax3<span class="token punctuation">,</span> ax4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>autofmt_xdate<span class="token punctuation">(</span>rotation <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token comment"># 标签值</span>ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span> features<span class="token punctuation">[</span><span class="token string">'actual'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ax1<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Temperature'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Max Temp'</span><span class="token punctuation">)</span><span class="token comment"># 昨天</span>ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span> features<span class="token punctuation">[</span><span class="token string">'temp_1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ax2<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Temperature'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ax2<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Previous Max Temp'</span><span class="token punctuation">)</span><span class="token comment"># 前天</span>ax3<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span> features<span class="token punctuation">[</span><span class="token string">'temp_2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax3<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ax3<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Temperature'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ax3<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Two Days Prior Max Temp'</span><span class="token punctuation">)</span><span class="token comment"># 我的逗逼朋友</span>ax4<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span> features<span class="token punctuation">[</span><span class="token string">'friend'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax4<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ax4<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Temperature'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ax4<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Friend Estimate'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span>pad<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p><img src="../images/output_6_0.png" alt="output_6_0"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 独热编码</span>features <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>features<span class="token punctuation">)</span>features<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>year</th>      <th>month</th>      <th>day</th>      <th>temp_2</th>      <th>temp_1</th>      <th>average</th>      <th>actual</th>      <th>friend</th>      <th>week_Fri</th>      <th>week_Mon</th>      <th>week_Sat</th>      <th>week_Sun</th>      <th>week_Thurs</th>      <th>week_Tues</th>      <th>week_Wed</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2016</td>      <td>1</td>      <td>1</td>      <td>45</td>      <td>45</td>      <td>45.6</td>      <td>45</td>      <td>29</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>2016</td>      <td>1</td>      <td>2</td>      <td>44</td>      <td>45</td>      <td>45.7</td>      <td>44</td>      <td>61</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>2016</td>      <td>1</td>      <td>3</td>      <td>45</td>      <td>44</td>      <td>45.8</td>      <td>41</td>      <td>56</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>2016</td>      <td>1</td>      <td>4</td>      <td>44</td>      <td>41</td>      <td>45.9</td>      <td>40</td>      <td>53</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>2016</td>      <td>1</td>      <td>5</td>      <td>41</td>      <td>40</td>      <td>46.0</td>      <td>44</td>      <td>41</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 标签</span>labels <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">'actual'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 在特征中去掉标签</span>features<span class="token operator">=</span> features<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'actual'</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 名字单独保存一下，以备后患</span>feature_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token comment"># 转换成合适的格式</span>features <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>features<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">features<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(348, 14)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessinginput_features <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>features<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_features<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([ 0.        , -1.5678393 , -1.65682171, -1.48452388, -1.49443549,       -1.3470703 , -1.98891668,  2.44131112, -0.40482045, -0.40961596,       -0.40482045, -0.40482045, -0.41913682, -0.40482045])</code></pre><h3 id="构建网络模型"><a href="#构建网络模型" class="headerlink" title="构建网络模型"></a>构建网络模型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>input_features<span class="token punctuation">,</span> dtype <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> dtype <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token comment"># 权重参数初始化</span>weights <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> biases <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> weights2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> biases2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> learning_rate <span class="token operator">=</span> <span class="token number">0.001</span> losses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 计算隐层</span>    hidden <span class="token operator">=</span> x<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>weights<span class="token punctuation">)</span> <span class="token operator">+</span> biases    <span class="token comment"># 加入激活函数</span>    hidden <span class="token operator">=</span> torch<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>hidden<span class="token punctuation">)</span>    <span class="token comment"># 预测结果</span>    predictions <span class="token operator">=</span> hidden<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>weights2<span class="token punctuation">)</span> <span class="token operator">+</span> biases2    <span class="token comment"># 通计算损失</span>    loss <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>predictions <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>     losses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 打印损失值</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'loss:'</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span>    <span class="token comment">#返向传播计算</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#更新参数</span>    weights<span class="token punctuation">.</span>data<span class="token punctuation">.</span>add_<span class="token punctuation">(</span><span class="token operator">-</span> learning_rate <span class="token operator">*</span> weights<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      biases<span class="token punctuation">.</span>data<span class="token punctuation">.</span>add_<span class="token punctuation">(</span><span class="token operator">-</span> learning_rate <span class="token operator">*</span> biases<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    weights2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>add_<span class="token punctuation">(</span><span class="token operator">-</span> learning_rate <span class="token operator">*</span> weights2<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    biases2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>add_<span class="token punctuation">(</span><span class="token operator">-</span> learning_rate <span class="token operator">*</span> biases2<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment"># 每次迭代都得记得清空</span>    weights<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>    biases<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>    weights2<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>    biases2<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>loss: tensor(8347.9924, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss: tensor(152.3170, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss: tensor(145.9625, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss: tensor(143.9453, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss: tensor(142.8161, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss: tensor(142.0664, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss: tensor(141.5386, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss: tensor(141.1528, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss: tensor(140.8618, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)loss: tensor(140.6318, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">predictions<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>torch.Size([348, 1])</code></pre><h3 id="更简单的构建网络模型"><a href="#更简单的构建网络模型" class="headerlink" title="更简单的构建网络模型"></a>更简单的构建网络模型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_size <span class="token operator">=</span> input_features<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>hidden_size <span class="token operator">=</span> <span class="token number">128</span>output_size <span class="token operator">=</span> <span class="token number">1</span>batch_size <span class="token operator">=</span> <span class="token number">16</span>my_nn <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span><span class="token punctuation">,</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>cost <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>my_nn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 训练网络</span>losses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    batch_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># MINI-Batch方法来进行训练</span>    <span class="token keyword">for</span> start <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_features<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        end <span class="token operator">=</span> start <span class="token operator">+</span> batch_size <span class="token keyword">if</span> start <span class="token operator">+</span> batch_size <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_features<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_features<span class="token punctuation">)</span>        xx <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>input_features<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        yy <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>labels<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        prediction <span class="token operator">=</span> my_nn<span class="token punctuation">(</span>xx<span class="token punctuation">)</span>        loss <span class="token operator">=</span> cost<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> yy<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        batch_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 打印损失</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        losses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>batch_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>batch_loss<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0 3950.7627100 37.9201200 35.654438300 35.278366400 35.116814500 34.986076600 34.868954700 34.75414800 34.637356900 34.516705</code></pre><p>预测训练结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>input_features<span class="token punctuation">,</span> dtype <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>predict <span class="token operator">=</span> my_nn<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换日期格式</span>dates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>years<span class="token punctuation">,</span> months<span class="token punctuation">,</span> days<span class="token punctuation">)</span><span class="token punctuation">]</span>dates <span class="token operator">=</span> <span class="token punctuation">[</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> date <span class="token keyword">in</span> dates<span class="token punctuation">]</span><span class="token comment"># 创建一个表格来存日期和其对应的标签数值</span>true_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'date'</span><span class="token punctuation">:</span> dates<span class="token punctuation">,</span> <span class="token string">'actual'</span><span class="token punctuation">:</span> labels<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 同理，再创建一个来存日期和其对应的模型预测值</span>months <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> feature_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>days <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> feature_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>years <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> feature_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>test_dates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>years<span class="token punctuation">,</span> months<span class="token punctuation">,</span> days<span class="token punctuation">)</span><span class="token punctuation">]</span>test_dates <span class="token operator">=</span> <span class="token punctuation">[</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> date <span class="token keyword">in</span> test_dates<span class="token punctuation">]</span>predictions_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'date'</span><span class="token punctuation">:</span> test_dates<span class="token punctuation">,</span> <span class="token string">'prediction'</span><span class="token punctuation">:</span> predict<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 真实值</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>true_data<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> true_data<span class="token punctuation">[</span><span class="token string">'actual'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b-'</span><span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">'actual'</span><span class="token punctuation">)</span><span class="token comment"># 预测值</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>predictions_data<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> predictions_data<span class="token punctuation">[</span><span class="token string">'prediction'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ro'</span><span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">'prediction'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation <span class="token operator">=</span> <span class="token string">'60'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 图名</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Maximum Temperature (F)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Actual and Predicted Values'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../images/output_21_0.png" alt=""></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单神经网络 </tag>
            
            <tag> 可视化曲线 </tag>
            
            <tag> PyTorch </tag>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片提取</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/image-20221003152451996.png" alt="image-20221003152451996"></p><h3 id="关于yolo中图像的提取"><a href="#关于yolo中图像的提取" class="headerlink" title="关于yolo中图像的提取"></a>关于yolo中图像的提取</h3><p>1 、 我们可以发现 由于使用了 pytorch 所以把 img都变成了 tensor类型</p><p><img src="../images/image-20221003152606759.png" alt="image-20221003152606759"></p><p>在第一次 提取的时候 可以发现 h =  330 w = 494 </p><p>这是一个长方形 明显不 符合规格 所以 采取了填充 <img src="../images/无标题.png" alt="无标题"></p><p> 也就是把他pading一下 变成一个正方形 让多余的地方是 0   不影响特征提取</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p><img src="../images/image-20221003153543945.png" alt="image-20221003153543945"></p><p>明显标签和图片是一致的</p><p><img src="../images/image-20221003154109297.png" alt="image-20221003154109297"></p><p>明显  label是一个txt 所以要 用numpy来 loadtxt读取</p><p>但是 由于用的torch 于是又用 formnumpy函数 转化为tensor</p><p>什么究极套娃<img src="../images/image-20221003154413329.png" alt=""></p><p>然后 把坐标 变成padding之后的坐标 也就是变成正方形之后的</p><p><img src="../images/image-20221003154717902.png" alt="image-20221003154717902"></p><p>这 是图片增强</p><p>就是通过变化图像来增加 图片数量 增加 特征提取的数量</p><p>貌似 coco数据集很大 应该不需要进行图像增强了</p>]]></content>
      
      
      <categories>
          
          <category> yolo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolov3 </tag>
            
            <tag> torch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov3 框架第一步 三合一 con</title>
      <link href="/posts/ad77980a.html"/>
      <url>/posts/ad77980a.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/image-20221003155141803.png" alt="image-20221003155141803"></p><p>这是读配置文件 </p><p><img src="../images/image-20221003155331432.png" alt="image-20221003155331432"></p><p>这是 进行走一遍</p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1<img src="../images/image-20221003155649102.png" alt="image-20221003155649102"></h3><p>搭建网络结构</p><p>nn.moduleList() 是按顺序搭建模块</p><p><img src="../images/image-20221003155744505.png" alt="image-20221003155744505"></p><p>哎呀这不卷积吗</p><p>这 卷积核大小 什么步长  padding relu的计算方法 都在里面呢</p><p><img src="../images/image-20221003155920086.png" alt="image-20221003155920086"></p><p>这玩应是3合1 卷积 batch relu  是个组合</p><p><img src="../images/image-20221003160201628.png" alt="image-20221003160201628"></p><p>配置卷积</p><p>然后就是 做 归一化 也就是bn（batch_normalize）</p><p><img src="../images/image-20221003160325246.png" alt="image-20221003160325246"></p><p>直接加进去了</p><p>还差个relu  是把负的变成0</p><p>把激活函数加进去</p><p><img src="../images/image-20221003160403052.png" alt="image-20221003160403052"></p><p><img src="../images/image-20221003160701990.png" alt="image-20221003160701990"></p><p>完成了第一步</p><p>module序列</p><p><img src="../images/image-20221003160731178.png" alt="image-20221003160731178"></p><p>就这步</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3>]]></content>
      
      
      <categories>
          
          <category> yolo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolov3 </tag>
            
            <tag> con </tag>
            
            <tag> torch </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>404</title>
      <link href="/404/index.html"/>
      <url>/404/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: 'ZhuZiAYuanJWD';}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: 'iconfont' !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span{  color: #f2b94b;}.bangumi-info-item em{  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme='dark'] #recent-posts > .recent-post-item {  background: #121212;}[data-theme='dark'] .card-widget {  background: #121212 !important;}[data-theme='dark'] div#post {  background: #121212 !important;}[data-theme='dark'] div#tag {  background: #121212 !important;}[data-theme='dark'] div#archive {  background: #121212 !important;}[data-theme='dark'] div#page {  background: #121212 !important;}[data-theme='dark'] div#category {  background: #121212 !important;}[data-theme='dark'] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #425aef;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #425aef;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url('/img/x1.cur'), auto;}a,[type='button']:not(:disabled),[type='reset']:not(:disabled),[type='submit']:not(:disabled),button:not(:disabled) {  cursor: url('/img/x2.cur'), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #425aef;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--heo-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[# https://www.npmjs.com/package/hexo-butterfly-tag-plugins-plusnpm install hexo-butterfly-tag-plugins-plus --savenpm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
